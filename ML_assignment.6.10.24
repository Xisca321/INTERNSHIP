{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "589f1072",
   "metadata": {},
   "outputs": [],
   "source": [
    "# question 11 Write a Python program to find the factorial of a number."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "45a98dbd",
   "metadata": {},
   "outputs": [],
   "source": [
    "def factorial (n):\n",
    "    if n == 0 or n == 1:\n",
    "        return 1\n",
    "    else: return n * factorial (n-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8623155c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# example\n",
    "number =5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e2429540",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "factorial of 5 is 120\n"
     ]
    }
   ],
   "source": [
    "print (f\"factorial of {number} is {factorial(number)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "a226492d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# question 12 Write a Python program to find whether a number is prime or composite."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c2d8c2af",
   "metadata": {},
   "outputs": [],
   "source": [
    "def is_prime (num):\n",
    "    if num <= 1:\n",
    "        return False\n",
    "    for i in range(2, int(num ** 0.5) + 1):\n",
    "        if num % 1 == 0:\n",
    "            return False\n",
    "        return True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "da1fb87f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "39 is a composite number\n"
     ]
    }
   ],
   "source": [
    "#example \n",
    "number =39\n",
    "if is_prime(number):\n",
    "    print (f\"{number} is a prime number\")\n",
    "else:\n",
    "    print (f\"{number} is a composite number\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "c48119ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "# question 13Write a Python program to check whether a given string is a palindrome or not."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "437be977",
   "metadata": {},
   "outputs": [],
   "source": [
    "def is_palindrome(s):\n",
    "    s = s.lowew()\n",
    "    return s==s [::-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "76121bf1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# question 14 Write a Python program to get the third side of a right-angled triangle from two given sides."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "eab40c1b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import math"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "ba80fae9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " the third side is {5.0}\n"
     ]
    }
   ],
   "source": [
    "def find_third_side (a,b):\n",
    "    return math.sqrt(a**2+b**2)\n",
    "#example\n",
    "side1=4\n",
    "side2=3\n",
    "print (f\" the third side is\" , {find_third_side(side1 , side2)})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "d0bf26ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "# question 15 Write a Python program to print the frequency of each of the characters present in a given string"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "8294fa11",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "def character_frequency(s):\n",
    "    return counter(s)\n",
    "\n",
    "# example\n",
    "string = (\"hello world\")\n",
    "string.count('o')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a797fceb",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
